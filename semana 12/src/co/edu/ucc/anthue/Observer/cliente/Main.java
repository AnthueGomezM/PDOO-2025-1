package co.edu.ucc.anthue.Observer.cliente;

import co.edu.ucc.anthue.Observer.observadores.NotificadorEmail;
import co.edu.ucc.anthue.Observer.observadores.OrdenTecnica;
import co.edu.ucc.anthue.Observer.observadores.RegistroEvento;
import co.edu.ucc.anthue.Observer.sujeto.Sensor;
import co.edu.ucc.anthue.Personalizado;

public class Main {
    public static void main(String[] args) {
        Personalizado programa = new Personalizado("""
                 ------------------------------------------------------------------------------------------------------------
                 ****************************
                 *        BIENVENIDO A MI   *
                 *          PROGRAMA üöÄ     *
                 *‚ú®‚ú®‚ú®Anthue Gomez‚ú®‚ú®‚ú®*
                 ****************************
                 üë∑‚Äç‚ôÇÔ∏èhistoria de Usuario:
                 En una planta de producci√≥n de alimentos, Julia es responsable de monitorear sensores de temperatura ubicados 
                 en diferentes zonas de almacenamiento. Cada vez que un sensor supera los 8‚ÄØ¬∞C, deben activarse m√∫ltiples acciones:
                 ‚Ä¢	Notificar al gerente por correo electr√≥nico.
                 ‚Ä¢	Registrar el evento en el sistema de alertas.
                 ‚Ä¢	Activar una orden de verificaci√≥n t√©cnica.
                 Antes, todo esto estaba embebido en una sola clase de Sensor. El c√≥digo era dif√≠cil de mantener y no pod√≠a ampliarse f√°cilmente.
                 Julia decidi√≥ aplicar el patr√≥n Observer: el Sensor se convierte en el "sujeto observable", y cada uno de los m√≥dulos 
                 anteriores se convierte en un "observador" que se suscribe al sensor.
                 Con esta soluci√≥n, ahora puede agregar o quitar observadores sin tocar el c√≥digo del sensor. Incluso el equipo de TI 
                 implement√≥ nuevos observadores para reportes en Power BI y simuladores                                                                                     
                 -------------------------------------------------------------------------------------------------------------
                ""","Patr√≥n implementado: Observer");

        programa.mostrarEncabezado();
        Sensor sensor = new Sensor();
        sensor.agregarObservador(new NotificadorEmail());
        sensor.agregarObservador(new RegistroEvento());
        sensor.agregarObservador(new OrdenTecnica());

        sensor.setTemperatura(6.5); // no se notifica
        sensor.setTemperatura(8.5); // activa todos los observadores
        programa.mostrarPatron();
    }
}
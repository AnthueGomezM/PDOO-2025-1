package co.edu.ucc.anthue.ChainOfResponsibility.cliente;

import co.edu.ucc.anthue.ChainOfResponsibility.manejadores.Aprobador;
import co.edu.ucc.anthue.ChainOfResponsibility.manejadores.DirectorFinanciero;
import co.edu.ucc.anthue.ChainOfResponsibility.manejadores.JefeDepartamento;
import co.edu.ucc.anthue.ChainOfResponsibility.manejadores.Supervisor;
import co.edu.ucc.anthue.Personalizado;

public class Main {
    public static void main(String[] args) {
        Personalizado programa = new Personalizado("""
                 ------------------------------------------------------------------------------------------------------------
                 ****************************
                 *        BIENVENIDO A MI   *
                 *          PROGRAMA üöÄ     *
                 *‚ú®‚ú®‚ú®Anthue Gomez‚ú®‚ú®‚ú®*
                 ****************************
                 üë∑‚Äç‚ôÇÔ∏èhistoria de Usuario:
                 Mar√≠a es analista de TI en una empresa multinacional que implementa un nuevo sistema de aprobaci√≥n de compras. 
                 Cada solicitud de compra debe ser evaluada por distintos roles seg√∫n su monto:
                 ‚Ä¢	Menor a $500: supervisor directo.
                 ‚Ä¢	Entre $500 y $5000: jefe de departamento.
                 ‚Ä¢	Mayor a $5000: direcci√≥n financiera.
                 Inicialmente, el flujo estaba codificado como una gran estructura if-else, lo que hac√≠a dif√≠cil su modificaci√≥n. 
                 Mar√≠a decide aplicar el patr√≥n Chain of Responsibility.
                 Define una interfaz Aprobador con un m√©todo setSiguiente() y procesarSolicitud(). Cada clase representa un rol y 
                 maneja solo su caso.
                 Ahora, la cadena se configura din√°micamente, y nuevos niveles de aprobaci√≥n pueden agregarse f√°cilmente sin 
                 modificar la l√≥gica principal. Incluso se pueden registrar logs de cada paso en la cadena para auditor√≠a.
                 -------------------------------------------------------------------------------------------------------------
                ""","Patr√≥n implementado: Chain of Responsibility");

        programa.mostrarEncabezado();
        Aprobador supervisor = new Supervisor();
        Aprobador jefe = new JefeDepartamento();
        Aprobador director = new DirectorFinanciero();

        supervisor.setSiguiente(jefe);
        jefe.setSiguiente(director);

        supervisor.procesarSolicitud(300);   // Supervisor
        supervisor.procesarSolicitud(3000);  // Jefe de Departamento
        supervisor.procesarSolicitud(15000); // Director Financiero
        System.out.println("\nIdentidad codificada: " + programa.getIdentidad());
        programa.mostrarPatron();
    }
}